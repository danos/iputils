---
 ping.c         |  145 +++++++++++++++++++++++++++++++++++++++++++++------------
 ping6_common.c |   52 ++++++++++----------
 2 files changed, 143 insertions(+), 54 deletions(-)

--- a/ping.c
+++ b/ping.c
@@ -202,6 +202,7 @@
 	socket_st sock4 = { .fd = -1 };
 	socket_st sock6 = { .fd = -1 };
 	char *target;
+	char *addr_device = NULL;
 
 	limit_capabilities();
 
@@ -218,7 +219,7 @@
 		hints.ai_family = AF_INET6;
 
 	/* Parse command line options */
-	while ((ch = getopt(argc, argv, "h?" "4bRT:" "6F:N:" "aABc:dDfi:I:l:Lm:M:nOp:qQ:rs:S:t:UvVw:W:")) != EOF) {
+	while ((ch = getopt(argc, argv, "h?" "4bRT:" "6F:N:" "aABc:dDfi:I:l:Lm:M:nOp:qQ:rs:S:t:UvVw:W:Z:")) != EOF) {
 		switch(ch) {
 		/* IPv4 specific options */
 		case '4':
@@ -323,6 +324,7 @@
 			break;
 		}
 		case 'I':
+		case 'Z':
 			/* IPv6 */
 			if (strchr(optarg, ':')) {
 				char *p, *addr = strdup(optarg);
@@ -349,7 +351,12 @@
 			} else if (inet_pton(AF_INET, optarg, &source.sin_addr) > 0) {
 				options |= F_STRICTSOURCE;
 			} else {
-				device = optarg;
+				if (ch == 'I')
+					device = optarg;
+				if (ch == 'Z') {
+					addr_device = optarg;
+					options |= F_STRICTSOURCE;
+				}
 			}
 			break;
 		case 'l':
@@ -515,12 +522,77 @@
 		exit(2);
 	}
 
+	/* get interface address if required */
+	if (addr_device) {
+		struct ifaddrs *ifap, *ifa;
+		int found = 0, found6 = 0;
+		struct ifreq ifr;
+		int fd = (sock4.fd != -1) ? sock4.fd : sock6.fd;
+
+		/* check if interface is up */
+		memset(&ifr, 0, sizeof(ifr));
+		strncpy(ifr.ifr_name, addr_device, IFNAMSIZ-1);
+		if (ioctl(fd, SIOCGIFFLAGS, &ifr) < 0) {
+			fprintf(stderr, "ping: SIOCGIFFLAGS for %s, %s\n",
+				addr_device,strerror (errno));
+			freeaddrinfo(result);
+			exit(2);
+		}
+
+		if (!(ifr.ifr_flags & IFF_UP)) {
+			fprintf(stderr, "ping: interface %s is down\n",
+				addr_device);
+			freeaddrinfo(result);
+			exit(2);
+		}
+
+		if (getifaddrs (&ifap) < 0) {
+			fprintf(stderr, "ping: getifaddrs failed, %s\n",
+				strerror (errno));
+			freeaddrinfo(result);
+			exit(2);
+		}
+		for (ifa = ifap; ifa; ifa = ifa->ifa_next) {
+			if (ifa->ifa_addr &&
+			    (strncmp(ifa->ifa_name, addr_device,
+				     IFNAMSIZ - 1) == 0)) {
+				if (!found && ifa->ifa_addr->sa_family ==
+				    AF_INET) {
+					struct sockaddr_in *sa = (struct sockaddr_in *) ifa->ifa_addr;
+					if (sa->sin_addr.s_addr != htonl(INADDR_LOOPBACK)) {
+						found = 1;
+						source = *sa;
+					}
+				}
+				else if (!found6 &&
+					 ifa->ifa_addr->sa_family == AF_INET6) {
+					struct sockaddr_in6 *sa = (struct sockaddr_in6 *) ifa->ifa_addr;
+					if ((!IN6_IS_ADDR_LINKLOCAL(&sa->sin6_addr) &&
+					     !IN6_IS_ADDR_LOOPBACK(&sa->sin6_addr))) {
+						found6 = 1;
+						source6 = *sa;
+					}
+				}
+				/* find first address for each AF */
+				if (found && found6)
+					break;
+			}
+		}
+		freeifaddrs(ifap);
+	}
+
 	for (ai = result; ai; ai = ai->ai_next) {
 		switch (ai->ai_family) {
 		case AF_INET:
+			if (addr_device && source.sin_addr.s_addr == 0)
+				goto no_src_address;
+
 			status = ping4_run(argc, argv, ai, &sock4);
 			break;
 		case AF_INET6:
+			if (addr_device && IN6_IS_ADDR_UNSPECIFIED(&source6.sin6_addr))
+				goto no_src_address;
+
 			status = ping6_run(argc, argv, ai, &sock6);
 			break;
 		default:
@@ -535,6 +607,11 @@
 	freeaddrinfo(result);
 
 	return status;
+
+no_src_address:
+	fprintf(stderr, "ping: No suitable source address on "
+					"interface %s\n", addr_device);
+	exit(2);
 }
 
 int ping4_run(int argc, char **argv, struct addrinfo *ai, socket_st *sock)
@@ -598,7 +675,7 @@
 		argv++;
 	}
 
-	if (source.sin_addr.s_addr == 0) {
+	if (source.sin_addr.s_addr == 0 || device) {
 		socklen_t alen;
 		struct sockaddr_in dst = whereto;
 		int probe_fd = socket(AF_INET, SOCK_DGRAM, 0);
@@ -672,36 +749,39 @@
 				exit(2);
 			}
 		}
-		alen = sizeof(source);
-		if (getsockname(probe_fd, (struct sockaddr*)&source, &alen) == -1) {
-			perror("getsockname");
-			exit(2);
-		}
-		source.sin_port = 0;
 
-#ifndef WITHOUT_IFADDRS
-		if (device) {
-			struct ifaddrs *ifa0, *ifa;
-			int ret;
-
-			ret = getifaddrs(&ifa0);
-			if (ret) {
-				fprintf(stderr, "gatifaddrs() failed.\n");
+		if (source.sin_addr.s_addr == 0) {
+			alen = sizeof(source);
+			if (getsockname(probe_fd, (struct sockaddr*)&source, &alen) == -1) {
+				perror("getsockname");
 				exit(2);
 			}
-			for (ifa = ifa0; ifa; ifa = ifa->ifa_next) {
-				if (!ifa->ifa_addr || ifa->ifa_addr->sa_family != AF_INET)
-					continue;
-				if (!strncmp(ifa->ifa_name, device, sizeof(device) - 1) &&
-				    !memcmp(&((struct sockaddr_in *)ifa->ifa_addr)->sin_addr,
-					    &source.sin_addr, sizeof(source.sin_addr)))
-					break;
+			source.sin_port = 0;
+
+#ifndef WITHOUT_IFADDRS
+			if (device) {
+				struct ifaddrs *ifa0, *ifa;
+				int ret;
+
+				ret = getifaddrs(&ifa0);
+				if (ret) {
+					fprintf(stderr, "gatifaddrs() failed.\n");
+					exit(2);
+				}
+				for (ifa = ifa0; ifa; ifa = ifa->ifa_next) {
+					if (!ifa->ifa_addr || ifa->ifa_addr->sa_family != AF_INET)
+						continue;
+					if (!strncmp(ifa->ifa_name, device, sizeof(device) - 1) &&
+						!memcmp(&((struct sockaddr_in *)ifa->ifa_addr)->sin_addr,
+							&source.sin_addr, sizeof(source.sin_addr)))
+						break;
+				}
+				freeifaddrs(ifa0);
+				if (!ifa)
+					fprintf(stderr, "ping: Warning: source address might be selected on device other than %s.\n", device);
 			}
-			freeifaddrs(ifa0);
-			if (!ifa)
-				fprintf(stderr, "ping: Warning: source address might be selected on device other than %s.\n", device);
-		}
 #endif
+		}
 		close(probe_fd);
 	} while (0);
 
@@ -1694,6 +1774,7 @@
 		USAGE_NEWLINE
 		" [-w deadline]"
 		" [-W timeout]"
+		" [-Z source-interface]"
 		" [hop1 ...] destination"
 		"\n"
 	);
--- a/ping6_common.c
+++ b/ping6_common.c
@@ -742,7 +742,7 @@
 
 	hostname = target;
 
-	if (IN6_IS_ADDR_UNSPECIFIED(&source6.sin6_addr)) {
+	if (IN6_IS_ADDR_UNSPECIFIED(&source6.sin6_addr) || device) {
 		socklen_t alen;
 		int probe_fd = socket(AF_INET6, SOCK_DGRAM, 0);
 
@@ -789,37 +789,40 @@
 			perror("connect");
 			exit(2);
 		}
-		alen = sizeof source6;
-		if (getsockname(probe_fd, (struct sockaddr *) &source6, &alen) == -1) {
-			perror("getsockname");
-			exit(2);
-		}
-		source6.sin6_port = 0;
-		close(probe_fd);
-
-#ifndef WITHOUT_IFADDRS
-		if (device) {
-			struct ifaddrs *ifa0, *ifa;
 
-			if (getifaddrs(&ifa0)) {
-				perror("getifaddrs");
+		if (IN6_IS_ADDR_UNSPECIFIED(&source6.sin6_addr)) {
+			alen = sizeof source6;
+			if (getsockname(probe_fd, (struct sockaddr *) &source6, &alen) == -1) {
+				perror("getsockname");
 				exit(2);
 			}
+			source6.sin6_port = 0;
+			close(probe_fd);
 
-			for (ifa = ifa0; ifa; ifa = ifa->ifa_next) {
-				if (!ifa->ifa_addr || ifa->ifa_addr->sa_family != AF_INET6)
-					continue;
-				if (!strncmp(ifa->ifa_name, device, sizeof(device) - 1) &&
-				    IN6_ARE_ADDR_EQUAL(&((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr,
-						       &source6.sin6_addr))
-					break;
-			}
-			if (!ifa)
-				fprintf(stderr, "ping6: Warning: source address might be selected on device other than %s.\n", device);
+#ifndef WITHOUT_IFADDRS
+			if (device) {
+				struct ifaddrs *ifa0, *ifa;
 
-			freeifaddrs(ifa0);
-		}
+				if (getifaddrs(&ifa0)) {
+					perror("getifaddrs");
+					exit(2);
+				}
+
+				for (ifa = ifa0; ifa; ifa = ifa->ifa_next) {
+					if (!ifa->ifa_addr || ifa->ifa_addr->sa_family != AF_INET6)
+						continue;
+					if (!strncmp(ifa->ifa_name, device, sizeof(device) - 1) &&
+						IN6_ARE_ADDR_EQUAL(&((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr,
+								   &source6.sin6_addr))
+						break;
+				}
+				if (!ifa)
+					fprintf(stderr, "ping6: Warning: source address might be selected on device other than %s.\n", device);
+
+				freeifaddrs(ifa0);
+			}
 #endif
+		}
 	}
 	else if (device && (IN6_IS_ADDR_LINKLOCAL(&source6.sin6_addr) ||
 			    IN6_IS_ADDR_MC_LINKLOCAL(&source6.sin6_addr)))
